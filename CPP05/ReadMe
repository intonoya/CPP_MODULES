Short information about the cpp_module_05

Exception:

An exception is a problem that arises during the execution of a program. A C++ exception 
is a response to an exceptional circumstance that arises while a program is running.
Exceptions provide a way to transfer control from one part of a program to another. 
C++ exception handling is built upon three keywords: try, catch, and throw.

1. throw − A program throws an exception when a problem shows up. This is done using 
a throw keyword.

2. catch − A program catches an exception with an exception handler at the place in a 
program where you want to handle the problem. The catch keyword indicates the catching 
of an exception.

3. try − A try block identifies a block of code for which particular exceptions will 
be activated. It's followed by one or more catch blocks.

Assuming a block will raise an exception, a method catches an exception using a 
combination of the try and catch keywords. A try/catch block is placed around the 
code that might generate an exception. Code within a try/catch block is referred to 
as protected code.You can list down multiple catch statements to catch different type 
of exceptions incase your try block raises more than 1 exception in different situations.

Throwing Exceptions:

Exceptions can be thrown anywhere within a code block using throw statement. 
The operand of the throw statement determines a type for the exception and can be
any expression and the type of the result of the expression determines the type of 
exception thrown.

Catching Exceptions:

The catch block following the try block catches any exception. You can specify what 
type of exception you want to catch and this is determined by the exception declaration 
that appears in parentheses following the keyword catch.

Because we are raising an exception of type {X}, so while catching this exception, we have to use {X} in catch block.

C++ Standard Exceptions:

1. std::exception: An exception and parent class of all the standard C++ exceptions,
2. std::bad_alloc: This can be thrown by new,
3. std::bad_cast: This can be thrown by dynamic_cast,
4. std::bad_exception: This is useful device to handle unexpected exceptions in a C++ 
program,
5. std::bad_typeid: This can be thrown by typeid,
6. std::logic_error: An exception that theoretically can be detected by reading the code,
7. std::domain_error: This is an exception thrown when a mathematically invalid domain is 
used,
8. std::invalid_argument: This is thrown due to invalid arguments,
9. std::length_error: This is thrown when a too big std::string is created,
10. std::out_of_range: This can be thrown by the 'at' method, for example a 
std::vector and std::bitset<>::operator[](),
11. std::runtime_error: An exception that theoretically cannot be detected by reading 
the code,
12. std::overflow_error: This is thrown if a mathematical overflow occurs,
13. std::range_error: This is occurred when you try to store a value which is out of range,
14. std::underflow_error: This is thrown if a mathematical underflow occurs.

Define New Exceptions:

You can define new exceptions with the help of what(). It is a public method provided 
by exception class and it has been overridden by all the child exception classes. 
This returns the cause of an exception.